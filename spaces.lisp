(in-package :rephrase)

(defclass spaces (rephrase)
  ((state :accessor state)))

(defmethod reset ((self spaces))
  (setf (state self) :idle))

(defmethod filter ((self spaces) token-list)
  (flet ((ws? (tok)
	   (and (eq :character (token-kind tok))
		(or (char= #\Space (token-text tok))
		    (char= #\Newline (token-text tok))
		    (char= #\Tab (token-text tok))
		    (char= #\; (token-text tok))
		    (char= #\, (token-text tok))
		    (char= #\& (token-text tok))))))
    (let ((output nil))
      (@:loop
	(@:exit-when (null token-list))
	(let ((tok (pop token-list)))
	  (ecase (state self)
	    (:idle
	     (cond ((eq :EOF (token-kind tok))
		    (push tok output)
		    (assert (null token-list)))
		   ((ws? tok)
		    (setf (state self) :ignoring))
		   (t (push tok output))))
	    (:ignoring
	     (cond ((eq :EOF (token-kind tok))
		    (push tok output)
		    (assert (null token-list)))
		   ((ws? tok)
		    )
		   (t (push tok output)
		      (setf (state self) :idle))))
	    )))
      output)))
